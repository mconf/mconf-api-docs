{
  "docusaurus-plugin-content-docs": {
    "default": {
      "path": "/docs/pages",
      "versions": [
        {
          "name": "current",
          "label": "Next",
          "isLast": true,
          "path": "/docs/pages",
          "mainDocId": "guide",
          "docs": [
            {
              "id": "guide",
              "path": "/docs/pages/guide"
            },
            {
              "id": "guide-pt",
              "path": "/docs/pages/guide-pt"
            }
          ],
          "draftIds": [],
          "sidebars": {}
        }
      ],
      "breadcrumbs": true
    }
  },
  "docusaurus-plugin-redoc": {
    "plugin-redoc-0": {
      "url": "redocusaurus/plugin-redoc-0.yaml",
      "themeId": "theme-redoc",
      "isSpecFile": true,
      "spec": {
        "openapi": "3.0.3",
        "info": {
          "description": "This is [Elos](https://elos.vc/) official API documentation, built using the OpenAPI specification with Redoc.\n\n# Intro\n\nThe Elos API is compatible with the [BigBlueButton (BBB) API](https://docs.bigbluebutton.org/development/api/), so if your product already integrates with BBB, you can use the same API to integrate with Elos. Most of the API calls described here are either identical or very similar to what is offered by BigBlueButton. Some API calls, however, are unique to Elos.\n\n# Authentication\n\nTo verify if an API call is valid, the API uses a checksum system.\n\nIn this system, every API call should include a `checksum` parameter. The value passed in this parameter is calculated from a combination of the API call method name plus the query string plus your shared secret to access the API. For each incoming request the servers will verify the checksum and see if they match with the shared secret stored on the server. If they match, the controller accepts the incoming request.\n\nTo calculate the checksum, follow these steps:\n\n1. Create the entire query string for your API call without the checksum parameter. Example for the `create` API call:\n    ```plaintext\n    name=Test+Meeting&meetingID=abc123&attendeePW=111222&moderatorPW=333444\n    ```\n2. Prepend the API call name (`create` in this example) to your string:\n    ```plaintext\n    createname=Test+Meeting&meetingID=abc123&attendeePW=111222&moderatorPW=333444\n    ```\n3. Now, append the shared secret to your string. Using `639259d4-9dd8-4b25-bf01-95f9567eaf4b` as the shared secret in this example (the example shows multiple lines for clarity, but it's all a single string):\n    ```plaintext\n    createname=Test+Meeting&meetingID=abc123&attendeePW=111222&\n    moderatorPW=333444639259d4-9dd8-4b25-bf01-95f9567eaf4b\n    ```\n4. Now, find the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash for that string. The implementation varies based on programming language, for example:\n    * Ruby\n        ```ruby\n        require 'digest'\n        string = \"createname=Test+Meeting&meetingID=abc123&attendeePW=111222&\" \\\n                 \"moderatorPW=333444639259d4-9dd8-4b25-bf01-95f9567eaf4b\"\n        Digest::SHA256.hexdigest(string)\n        # da9185f7f333cfdfcd6eeac32dca3777510c4c436020d8b887ba5515bd1d189e\n        ```\n    * PHP\n        ```php\n        <?php\n        $string = \"createname=Test+Meeting&meetingID=abc123&attendeePW=111222&\" .\n                  \"moderatorPW=333444639259d4-9dd8-4b25-bf01-95f9567eaf4b\";\n        $sha256_hash = hash('sha256', $string);\n        echo $sha256_hash;\n        ?>\n        ```\n    * The resulting checksum is: `da9185f7f333cfdfcd6eeac32dca3777510c4c436020d8b887ba5515bd1d189e`\n5. Add a checksum parameter to your query string:\n    ```plaintext\n    name=Test+Meeting&meetingID=abc123&attendeePW=111222&\n    moderatorPW=333444&checksum=da9185f7f333cfdfcd6eeac32dca3777510c4c436020d8b887ba5515bd1d189e\n    ```\n\nYou **must** send this checksum with **every** API call. Since end users do not know your shared secret, they can not fake calls to the service, and they cannot modify any API calls since changing a single parameter name or value by only one character will completely change the checksum required to validate the call.\n\n\n# Secret Scope\n\nIt is interesting to note that the scope of a shared secret is **vitally** important to the operation\nof the request in which it was used. If the *scope* of the secret isnt high enough, the operation will **NOT** go through.\n\nThe possible *scopes* are as follows:\n\n* **global**:\n    * Has what can be essentially described as admin access, being able to perform any operation\n    it is used in.\n* **shared**:\n    * Is essentially a *user level* secret, being able to perform operations but not as freely,\n    having its fair share of restrictions.\n* **restricted**:\n    * As the title implies, the most restricted scope available for a secret, can only be used for certain specific operations.\n",
          "version": "1.0.0",
          "title": "Elos Conference API",
          "contact": {
            "name": "Email",
            "url": "https://elos.vc",
            "email": "contato@elos.vc"
          }
        },
        "servers": [
          {
            "url": "https://api.h.elos.dev/bigbluebutton/api",
            "description": "The homologation API server"
          }
        ],
        "x-tagGroups": [
          {
            "name": "General",
            "tags": [
              "meeting",
              "recording",
              "callbacks"
            ]
          },
          {
            "name": "Other",
            "tags": [
              "hooks",
              "monitoring"
            ]
          }
        ],
        "tags": [
          {
            "name": "meeting",
            "description": "Create, join, end and get information about your meetings"
          },
          {
            "name": "recording",
            "description": "Fetch and manage your recordings"
          },
          {
            "name": "callbacks",
            "description": "Everything about your Callbacks"
          },
          {
            "name": "monitoring",
            "description": "Monitoring centered requests"
          },
          {
            "name": "hooks",
            "description": "Create and manage webhooks, endpoints used to receive events from your meetings and recordings"
          }
        ],
        "paths": {
          "/": {
            "get": {
              "summary": "API Version",
              "operationId": "/",
              "description": "Returns the API version",
              "tags": [
                "monitoring"
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <version>1.0.0</version>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/version"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "API Version",
              "operationId": "/",
              "description": "Returns the API version",
              "tags": [
                "monitoring"
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <version>1.0.0</version>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/version"
                      }
                    }
                  }
                }
              }
            },
            "head": {
              "summary": "API Version",
              "operationId": "/",
              "description": "Returns the API version",
              "tags": [
                "monitoring"
              ],
              "responses": {
                "200": {
                  "description": "Successful operation"
                }
              }
            }
          },
          "/getMeetings": {
            "get": {
              "summary": "getMeetings",
              "operationId": "getMeetings",
              "description": "This call will return a list of all the meetings found on the servers that you have access to. It returns only meetings that are created on a server, it won't include past meetings that already ended.",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <meetings>\n    <meeting>\n      <meetingName>Demo Meeting</meetingName>\n      <meetingID>Demo Meeting</meetingID>\n      <internalMeetingID>183f0bf3a0982a127bdb8161e0c44eb696b3e75c-1531241258036</internalMeetingID>\n      <createTime>1531241258036</createTime>\n      <createDate>Tue Jul 10 16:47:38 UTC 2018</createDate>\n      <voiceBridge>70066</voiceBridge>\n      <dialNumber>613-555-1234</dialNumber>\n      <attendeePW>ap</attendeePW>\n      <moderatorPW>mp</moderatorPW>\n      <running>false</running>\n      <duration>0</duration>\n      <hasUserJoined>false</hasUserJoined>\n      <recording>false</recording>\n      <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n      <startTime>1531241258074</startTime>\n      <endTime>0</endTime>\n      <participantCount>0</participantCount>\n      <listenerCount>0</listenerCount>\n      <voiceParticipantCount>0</voiceParticipantCount>\n      <videoCount>0</videoCount>\n      <maxUsers>0</maxUsers>\n      <moderatorCount>0</moderatorCount>\n      <attendees/>\n      <metadata/>\n      <isBreakout>false</isBreakout>\n    </meeting>\n  </meetings>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getMeetings"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "getMeetings",
              "operationId": "getMeetings",
              "description": "This call will return a list of all the meetings found on the servers that you have access to. It returns only meetings that are created on a server, it won't include past meetings that already ended.",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <meetings>\n    <meeting>\n      <meetingName>Demo Meeting</meetingName>\n      <meetingID>Demo Meeting</meetingID>\n      <internalMeetingID>183f0bf3a0982a127bdb8161e0c44eb696b3e75c-1531241258036</internalMeetingID>\n      <createTime>1531241258036</createTime>\n      <createDate>Tue Jul 10 16:47:38 UTC 2018</createDate>\n      <voiceBridge>70066</voiceBridge>\n      <dialNumber>613-555-1234</dialNumber>\n      <attendeePW>ap</attendeePW>\n      <moderatorPW>mp</moderatorPW>\n      <running>false</running>\n      <duration>0</duration>\n      <hasUserJoined>false</hasUserJoined>\n      <recording>false</recording>\n      <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n      <startTime>1531241258074</startTime>\n      <endTime>0</endTime>\n      <participantCount>0</participantCount>\n      <listenerCount>0</listenerCount>\n      <voiceParticipantCount>0</voiceParticipantCount>\n      <videoCount>0</videoCount>\n      <maxUsers>0</maxUsers>\n      <moderatorCount>0</moderatorCount>\n      <attendees/>\n      <metadata/>\n      <isBreakout>false</isBreakout>\n    </meeting>\n  </meetings>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getMeetings"
                      }
                    }
                  }
                }
              }
            }
          },
          "/getAllMeetings": {
            "get": {
              "summary": "getAllMeetings",
              "operationId": "getAllMeetings",
              "description": "<div style=\"\n    background-color: #cff4fc;\n    color: #033b46;\n    padding: 20px;\n    font-size: 16px;\n    border-left: 0.25rem solid #9eeaf9\n    \">\n    This is a custom Elos call, which means it is not supported by the standard BigBlueButton API\n</div>\n\nThis call works as [getMeetings](#operation/getMeetings) but will also return meetings that already ended. Also, it can aggregate the recording info when setting `includeRecordings` to `true`. This is the standard call used to list a history of meetings (including or not their recordings).\n\n### Pagination\nThis call can be paginated using the `limit` and `offset` parameters.\n",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID"
                },
                {
                  "$ref": "#/components/parameters/meetingIDWildcard"
                },
                {
                  "$ref": "#/components/parameters/meetingName"
                },
                {
                  "$ref": "#/components/parameters/meetingNameWildcard"
                },
                {
                  "$ref": "#/components/parameters/meta"
                },
                {
                  "$ref": "#/components/parameters/includeRecordings"
                },
                {
                  "$ref": "#/components/parameters/limit"
                },
                {
                  "$ref": "#/components/parameters/offset"
                },
                {
                  "$ref": "#/components/parameters/sortBy"
                },
                {
                  "$ref": "#/components/parameters/orderBy"
                },
                {
                  "$ref": "#/components/parameters/startTime"
                },
                {
                  "$ref": "#/components/parameters/endTime"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <nextPage>false</nextPage>\n  <meetings>\n      <meetingData>\n          <meeting>\n              <meetingName>mymeeting</meetingName>\n              <meetingID>extid</meetingID>\n              <internalMeetingID>inid</internalMeetingID>\n              <createTime>Thu Sep 18 19:17:10 UTC 2014</createTime>\n              <createDate>Thu Sep 18 19:17:10 UTC 2014</createDate>\n              <voiceBridge>74518</voiceBridge>\n              <dialNumber>613-555-1234</dialNumber>\n              <attendeePW>ap</attendeePW>\n              <moderatorPW>mp</moderatorPW>\n              <running>true</running>\n              <duration>0</duration>\n              <hasUserJoined>true</hasUserJoined>\n              <recording>false</recording>\n              <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n              <startTime>1411067830029</startTime>\n              <endTime>2131241</endTime>\n              <participantCount>2</participantCount>\n              <listenerCount>1</listenerCount>\n              <voiceParticipantCount>1</voiceParticipantCount>\n              <videoCount>1</videoCount>\n              <maxUsers>3</maxUsers>\n              <moderatorCount>1</moderatorCount>\n              <attendees></attendees>\n              <metadata></metadata>\n              <isBreakout>false</isBreakout>\n              <transfer>false</transfer>\n              <transferCount>0</transferCount>\n          </meeting>\n          <recording>\n              <recordID>recordID</recordID>\n              <meetingID>extid</meetingID>\n              <internalMeetingID></internalMeetingID>\n              <name>myrecord</name>\n              <isBreakout>false</isBreakout>\n              <published>true</published>\n              <state>published</state>\n              <startTime>123123123</startTime>\n              <endTime>124124124123123</endTime>\n              <size>0</size>\n              <rawSize>0</rawSize>\n              <participants>2</participants>\n              <metadata></metadata>\n          </recording>\n      </meetingData>\n  </meetings>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getAllMeetings"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "getAllMeetings",
              "operationId": "getAllMeetings",
              "description": "<div style=\"\n    background-color: #cff4fc;\n    color: #033b46;\n    padding: 20px;\n    font-size: 16px;\n    border-left: 0.25rem solid #9eeaf9\n    \">\n    This is a custom Elos call, which means it is not supported by the standard BigBlueButton API\n</div>\n\nThis call works as [getMeetings](#operation/getMeetings) but will also return meetings that already ended. Also, it can aggregate the recording info when setting `includeRecordings` to `true`. This is the standard call used to list a history of meetings (including or not their recordings).\n\n### Pagination\nThis call can be paginated using the `limit` and `offset` parameters.\n",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID"
                },
                {
                  "$ref": "#/components/parameters/meetingIDWildcard"
                },
                {
                  "$ref": "#/components/parameters/meetingName"
                },
                {
                  "$ref": "#/components/parameters/meetingNameWildcard"
                },
                {
                  "$ref": "#/components/parameters/meta"
                },
                {
                  "$ref": "#/components/parameters/includeRecordings"
                },
                {
                  "$ref": "#/components/parameters/onlyRecorded"
                },
                {
                  "$ref": "#/components/parameters/limit"
                },
                {
                  "$ref": "#/components/parameters/offset"
                },
                {
                  "$ref": "#/components/parameters/sortBy"
                },
                {
                  "$ref": "#/components/parameters/orderBy"
                },
                {
                  "$ref": "#/components/parameters/startTime"
                },
                {
                  "$ref": "#/components/parameters/endTime"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <nextPage>false</nextPage>\n  <meetings>\n      <meetingData>\n          <meeting>\n              <meetingName>mymeeting</meetingName>\n              <meetingID>extid</meetingID>\n              <internalMeetingID>inid</internalMeetingID>\n              <createTime>Thu Sep 18 19:17:10 UTC 2014</createTime>\n              <createDate>Thu Sep 18 19:17:10 UTC 2014</createDate>\n              <voiceBridge>74518</voiceBridge>\n              <dialNumber>613-555-1234</dialNumber>\n              <attendeePW>ap</attendeePW>\n              <moderatorPW>mp</moderatorPW>\n              <running>true</running>\n              <duration>0</duration>\n              <hasUserJoined>true</hasUserJoined>\n              <recording>false</recording>\n              <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n              <startTime>1411067830029</startTime>\n              <endTime>2131241</endTime>\n              <participantCount>2</participantCount>\n              <listenerCount>1</listenerCount>\n              <voiceParticipantCount>1</voiceParticipantCount>\n              <videoCount>1</videoCount>\n              <maxUsers>3</maxUsers>\n              <moderatorCount>1</moderatorCount>\n              <attendees></attendees>\n              <metadata></metadata>\n              <isBreakout>false</isBreakout>\n              <transfer>false</transfer>\n              <transferCount>0</transferCount>\n          </meeting>\n          <recording>\n              <recordID>recordID</recordID>\n              <meetingID>extid</meetingID>\n              <internalMeetingID></internalMeetingID>\n              <name>myrecord</name>\n              <isBreakout>false</isBreakout>\n              <published>true</published>\n              <state>published</state>\n              <startTime>123123123</startTime>\n              <endTime>124124124123123</endTime>\n              <size>0</size>\n              <rawSize>0</rawSize>\n              <participants>2</participants>\n              <metadata></metadata>\n          </recording>\n      </meetingData>\n  </meetings>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getAllMeetings"
                      }
                    }
                  }
                }
              }
            }
          },
          "/isMeetingRunning": {
            "get": {
              "summary": "isMeetingRunning",
              "operationId": "isMeetingRunning",
              "description": "This call allows you to check whether a meeting is running or not by looking it up using a meetingID.",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n   <returncode>SUCCESS</returncode>\n   <running>true</running>                   \n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/isMeetingRunning"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "isMeetingRunning",
              "operationId": "isMeetingRunning",
              "description": "This call allows you to check whether a meeting is running or not by looking it up using a meetingID.",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n   <returncode>SUCCESS</returncode>\n   <running>true</running>                   \n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/isMeetingRunning"
                      }
                    }
                  }
                }
              }
            }
          },
          "/getMeetingInfo": {
            "get": {
              "summary": "getMeetingInfo",
              "operationId": "getMeetingInfo",
              "description": "Returns information about a meeting that is currently created on the servers (won't returned meetings that already ended).",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <meetingName>random-9031005</meetingName>\n  <meetingID>random-9031005</meetingID>\n  <internalMeetingID>dd6dad570f6323f50a9e1e1c6e94771b844e7495-1645118562804</internalMeetingID>\n  <createTime>1645118562804</createTime>\n  <createDate>Thu Feb 17 17:22:42 UTC 2022</createDate>\n  <voiceBridge>490695878</voiceBridge>\n  <dialNumber>18632080022</dialNumber>\n  <attendeePW>ap</attendeePW>\n  <moderatorPW>mp</moderatorPW>\n  <running>false</running>\n  <duration>540</duration>\n  <hasUserJoined>false</hasUserJoined>\n  <recording>false</recording>\n  <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n  <startTime>1645118562816</startTime>\n  <endTime>0</endTime>\n  <participantCount>0</participantCount>\n  <listenerCount>0</listenerCount>\n  <voiceParticipantCount>0</voiceParticipantCount>\n  <videoCount>0</videoCount>\n  <maxUsers>0</maxUsers>\n  <moderatorCount>0</moderatorCount>\n  <attendees/>\n  <metadata/>\n  <isBreakout>false</isBreakout>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getMeetingInfo"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "getMeetingInfo",
              "operationId": "getMeetingInfo",
              "description": "Returns information about a meeting that is currently created on the servers (won't returned meetings that already ended).",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <meetingName>random-9031005</meetingName>\n  <meetingID>random-9031005</meetingID>\n  <internalMeetingID>dd6dad570f6323f50a9e1e1c6e94771b844e7495-1645118562804</internalMeetingID>\n  <createTime>1645118562804</createTime>\n  <createDate>Thu Feb 17 17:22:42 UTC 2022</createDate>\n  <voiceBridge>490695878</voiceBridge>\n  <dialNumber>18632080022</dialNumber>\n  <attendeePW>ap</attendeePW>\n  <moderatorPW>mp</moderatorPW>\n  <running>false</running>\n  <duration>540</duration>\n  <hasUserJoined>false</hasUserJoined>\n  <recording>false</recording>\n  <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n  <startTime>1645118562816</startTime>\n  <endTime>0</endTime>\n  <participantCount>0</participantCount>\n  <listenerCount>0</listenerCount>\n  <voiceParticipantCount>0</voiceParticipantCount>\n  <videoCount>0</videoCount>\n  <maxUsers>0</maxUsers>\n  <moderatorCount>0</moderatorCount>\n  <attendees/>\n  <metadata/>\n  <isBreakout>false</isBreakout>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getMeetingInfo"
                      }
                    }
                  }
                }
              }
            }
          },
          "/create": {
            "get": {
              "summary": "create",
              "operationId": "get-create",
              "description": "Creates a meeting. This is the API call that receives all configurations for a meeting, some that can't be changed later on. Only after creating a meeting the users are allowed to join it.\n\nIt is recommended to call `create` always before joining a user into a session. The create call is idempotent: you can call it multiple times with the same parameters without side effects. This simplifies the logic for joining a user into a session as your application can always call `create` before returning the join URL to the user. This way, regardless of the order in which users join, the meeting will always exist when the user tries to join (the first `create` call actually creates the meeting; subsequent calls to `create` simply return `SUCCESS` and and indication that the meeting is already running).\n\nIf you create a meeting but no user joins it, it will be automatically finished after a few minutes.\n",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/name",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/meetingID-create",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/attendeePW"
                },
                {
                  "$ref": "#/components/parameters/moderatorPW"
                },
                {
                  "$ref": "#/components/parameters/welcome"
                },
                {
                  "$ref": "#/components/parameters/dialNumber"
                },
                {
                  "$ref": "#/components/parameters/voiceBridge"
                },
                {
                  "$ref": "#/components/parameters/maxParticipants"
                },
                {
                  "$ref": "#/components/parameters/logoutURL"
                },
                {
                  "$ref": "#/components/parameters/record"
                },
                {
                  "$ref": "#/components/parameters/duration"
                },
                {
                  "$ref": "#/components/parameters/isBreakout"
                },
                {
                  "$ref": "#/components/parameters/parentMeetingID"
                },
                {
                  "$ref": "#/components/parameters/sequence"
                },
                {
                  "$ref": "#/components/parameters/freeJoin"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsEnabled"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsPrivateChatEnabled"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsRecord"
                },
                {
                  "$ref": "#/components/parameters/meta"
                },
                {
                  "$ref": "#/components/parameters/moderatorOnlyMessage"
                },
                {
                  "$ref": "#/components/parameters/autoStartRecording"
                },
                {
                  "$ref": "#/components/parameters/allowStartStopRecording"
                },
                {
                  "$ref": "#/components/parameters/webcamsOnlyForModerator"
                },
                {
                  "$ref": "#/components/parameters/bannerText"
                },
                {
                  "$ref": "#/components/parameters/bannerColor"
                },
                {
                  "$ref": "#/components/parameters/muteOnStart"
                },
                {
                  "$ref": "#/components/parameters/allowModsToUnmuteUsers"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableCam"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableMic"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisablePrivateChat"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisablePublicChat"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableNote"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockedLayout"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockOnJoin"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockOnJoinConfigurable"
                },
                {
                  "$ref": "#/components/parameters/guestPolicy"
                },
                {
                  "$ref": "#/components/parameters/keepEvents"
                },
                {
                  "$ref": "#/components/parameters/meetingKeepEvents"
                },
                {
                  "$ref": "#/components/parameters/endWhenNoModerator"
                },
                {
                  "$ref": "#/components/parameters/endWhenNoModeratorDelayInMinutes"
                },
                {
                  "$ref": "#/components/parameters/meetingLayout"
                },
                {
                  "$ref": "#/components/parameters/learningDashboardEnabled"
                },
                {
                  "$ref": "#/components/parameters/learningDashboardCleanupDelayInMinutes"
                },
                {
                  "$ref": "#/components/parameters/allowModsToEjectCameras"
                },
                {
                  "$ref": "#/components/parameters/allowRequestsWithoutSession"
                },
                {
                  "$ref": "#/components/parameters/virtualBackgroundsDisabled"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <meetingID>mymeeting</meetingID>\n  <internalMeetingID>364366f1ca5940e99c149adbf046370ce8da625c-1529954869512</internalMeetingID>\n  <parentMeetingID>bbb-none</parentMeetingID>\n  <attendeePW>EWOIptzv</attendeePW>\n  <moderatorPW>mp</moderatorPW>\n  <createTime>1529954870092</createTime>\n  <voiceBridge>55523</voiceBridge>\n  <dialNumber>613-555-1234</dialNumber>\n  <createDate>Mon Jun 25 21:27:50 CEST 2018</createDate>\n  <hasUserJoined>false</hasUserJoined>\n  <duration>0</duration>\n  <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n  <messageKey/>\n  <message/>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/create"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "create",
              "operationId": "post-create",
              "description": "Creates a meeting. This is the API call that receives all configurations for a meeting, some that can't be changed later on. Only after creating a meeting the users are allowed to join it.\n\nIt is recommended to call `create` always before joining a user into a session. The create call is idempotent: you can call it multiple times with the same parameters without side effects. This simplifies the logic for joining a user into a session as your application can always call `create` before returning the join URL to the user. This way, regardless of the order in which users join, the meeting will always exist when the user tries to join (the first `create` call actually creates the meeting; subsequent calls to `create` simply return `SUCCESS` and and indication that the meeting is already running).\n\nIf you create a meeting but no user joins it, it will be automatically finished after a few minutes.\n",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/name",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/meetingID-create",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/attendeePW"
                },
                {
                  "$ref": "#/components/parameters/moderatorPW"
                },
                {
                  "$ref": "#/components/parameters/welcome"
                },
                {
                  "$ref": "#/components/parameters/dialNumber"
                },
                {
                  "$ref": "#/components/parameters/voiceBridge"
                },
                {
                  "$ref": "#/components/parameters/maxParticipants"
                },
                {
                  "$ref": "#/components/parameters/logoutURL"
                },
                {
                  "$ref": "#/components/parameters/record"
                },
                {
                  "$ref": "#/components/parameters/duration"
                },
                {
                  "$ref": "#/components/parameters/isBreakout"
                },
                {
                  "$ref": "#/components/parameters/parentMeetingID"
                },
                {
                  "$ref": "#/components/parameters/sequence"
                },
                {
                  "$ref": "#/components/parameters/freeJoin"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsEnabled"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsPrivateChatEnabled"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsRecord"
                },
                {
                  "$ref": "#/components/parameters/meta"
                },
                {
                  "$ref": "#/components/parameters/moderatorOnlyMessage"
                },
                {
                  "$ref": "#/components/parameters/autoStartRecording"
                },
                {
                  "$ref": "#/components/parameters/allowStartStopRecording"
                },
                {
                  "$ref": "#/components/parameters/webcamsOnlyForModerator"
                },
                {
                  "$ref": "#/components/parameters/bannerText"
                },
                {
                  "$ref": "#/components/parameters/bannerColor"
                },
                {
                  "$ref": "#/components/parameters/muteOnStart"
                },
                {
                  "$ref": "#/components/parameters/allowModsToUnmuteUsers"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableCam"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableMic"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisablePrivateChat"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisablePublicChat"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableNote"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockedLayout"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockOnJoin"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockOnJoinConfigurable"
                },
                {
                  "$ref": "#/components/parameters/guestPolicy"
                },
                {
                  "$ref": "#/components/parameters/keepEvents"
                },
                {
                  "$ref": "#/components/parameters/meetingKeepEvents"
                },
                {
                  "$ref": "#/components/parameters/endWhenNoModerator"
                },
                {
                  "$ref": "#/components/parameters/endWhenNoModeratorDelayInMinutes"
                },
                {
                  "$ref": "#/components/parameters/meetingLayout"
                },
                {
                  "$ref": "#/components/parameters/learningDashboardEnabled"
                },
                {
                  "$ref": "#/components/parameters/learningDashboardCleanupDelayInMinutes"
                },
                {
                  "$ref": "#/components/parameters/allowModsToEjectCameras"
                },
                {
                  "$ref": "#/components/parameters/allowRequestsWithoutSession"
                },
                {
                  "$ref": "#/components/parameters/virtualBackgroundsDisabled"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "requestBody": {
                "description": "## Pre-upload Slides\n\nYou can upload slides within the create call. If you do this, the BigBlueButton server will immediately download and process the slides.\n\nYou can pass the slides as a URL or embed the slides in base64 as part of the POST request. For embedding the slides, you have to send a HTTPS POST request (by default, the total size of the POST request can’t exceed 2MB, so embedding very large slides won’t work). The URL Resource has to be the same as the previously described.\n\nIn the body part, you would append a simple XML like the example below:\n\n```xml\n<modules>\n   <module name=\"presentation\">\n      <document url=\"http://www.sample-pdf.com/sample.pdf\" filename=\"report.pdf\"/>\n      <document name=\"sample-presentation.pdf\">JVBERi0xLjQKJ....\n        [clipped here]\n        ....0CiUlRU9GCg==\n      </document>\n   </module>\n</modules>\n```\n\nWhen you need to provide a document using a URL, and the document URL does not contain an extension, you can use the filename parameter, such as filename=test-results.pdf to help the BigBlueButton server determine the file type (in this example it would be a PDF file).\n\nIn the case more than a single document is provided, the first one will be loaded in the client, the processing of the other documents will continue in the background and they will be available for display when the user select one of them from the client.",
                "content": {
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "modules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "module": {
                                "type": "object",
                                "properties": {
                                  "document": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <meetingID>mymeeting</meetingID>\n  <internalMeetingID>364366f1ca5940e99c149adbf046370ce8da625c-1529954869512</internalMeetingID>\n  <parentMeetingID>bbb-none</parentMeetingID>\n  <attendeePW>EWOIptzv</attendeePW>\n  <moderatorPW>mp</moderatorPW>\n  <createTime>1529954870092</createTime>\n  <voiceBridge>55523</voiceBridge>\n  <dialNumber>613-555-1234</dialNumber>\n  <createDate>Mon Jun 25 21:27:50 CEST 2018</createDate>\n  <hasUserJoined>false</hasUserJoined>\n  <duration>0</duration>\n  <hasBeenForciblyEnded>false</hasBeenForciblyEnded>\n  <messageKey/>\n  <message/>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/create"
                      }
                    }
                  }
                }
              }
            },
            "components": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/name",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/meetingID-create",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/attendeePW"
                },
                {
                  "$ref": "#/components/parameters/moderatorPW"
                },
                {
                  "$ref": "#/components/parameters/welcome"
                },
                {
                  "$ref": "#/components/parameters/dialNumber"
                },
                {
                  "$ref": "#/components/parameters/voiceBridge"
                },
                {
                  "$ref": "#/components/parameters/maxParticipants"
                },
                {
                  "$ref": "#/components/parameters/logoutURL"
                },
                {
                  "$ref": "#/components/parameters/record"
                },
                {
                  "$ref": "#/components/parameters/duration"
                },
                {
                  "$ref": "#/components/parameters/isBreakout"
                },
                {
                  "$ref": "#/components/parameters/parentMeetingID"
                },
                {
                  "$ref": "#/components/parameters/sequence"
                },
                {
                  "$ref": "#/components/parameters/freeJoin"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsEnabled"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsPrivateChatEnabled"
                },
                {
                  "$ref": "#/components/parameters/breakoutRoomsRecord"
                },
                {
                  "$ref": "#/components/parameters/meta"
                },
                {
                  "$ref": "#/components/parameters/moderatorOnlyMessage"
                },
                {
                  "$ref": "#/components/parameters/autoStartRecording"
                },
                {
                  "$ref": "#/components/parameters/allowStartStopRecording"
                },
                {
                  "$ref": "#/components/parameters/webcamsOnlyForModerator"
                },
                {
                  "$ref": "#/components/parameters/bannerText"
                },
                {
                  "$ref": "#/components/parameters/bannerColor"
                },
                {
                  "$ref": "#/components/parameters/muteOnStart"
                },
                {
                  "$ref": "#/components/parameters/allowModsToUnmuteUsers"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableCam"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableMic"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisablePrivateChat"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisablePublicChat"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsDisableNote"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockedLayout"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockOnJoin"
                },
                {
                  "$ref": "#/components/parameters/lockSettingsLockOnJoinConfigurable"
                },
                {
                  "$ref": "#/components/parameters/guestPolicy"
                },
                {
                  "$ref": "#/components/parameters/keepEvents"
                },
                {
                  "$ref": "#/components/parameters/meetingKeepEvents"
                },
                {
                  "$ref": "#/components/parameters/endWhenNoModerator"
                },
                {
                  "$ref": "#/components/parameters/endWhenNoModeratorDelayInMinutes"
                },
                {
                  "$ref": "#/components/parameters/meetingLayout"
                },
                {
                  "$ref": "#/components/parameters/learningDashboardEnabled"
                },
                {
                  "$ref": "#/components/parameters/learningDashboardCleanupDelayInMinutes"
                },
                {
                  "$ref": "#/components/parameters/allowModsToEjectCameras"
                },
                {
                  "$ref": "#/components/parameters/allowRequestsWithoutSession"
                },
                {
                  "$ref": "#/components/parameters/virtualBackgroundsDisabled"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ]
            }
          },
          "/end": {
            "get": {
              "summary": "end",
              "operationId": "end-meeting",
              "description": "Use this to forcibly end a meeting and kick all participants out of the meeting.",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/password",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n   <returncode>SUCCESS</returncode>\n   <messageKey>sentEndMeetingRequest</messageKey>\n   <message>A request to end the meeting was sent.  Please wait a few seconds, and then use the getMeetingInfo or isMeetingRunning API calls to verify that it was ended.</message>                   \n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/end"
                      }
                    }
                  }
                }
              }
            }
          },
          "/join": {
            "get": {
              "summary": "join",
              "operationId": "join-meeting",
              "description": "Joins a user to the meeting specified in the meetingID parameter.",
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/fullName",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/meetingID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/password",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/createTime"
                },
                {
                  "$ref": "#/components/parameters/userID"
                },
                {
                  "$ref": "#/components/parameters/webVoiceConf"
                },
                {
                  "$ref": "#/components/parameters/configToken"
                },
                {
                  "$ref": "#/components/parameters/defaultLayout"
                },
                {
                  "$ref": "#/components/parameters/avatarURL"
                },
                {
                  "$ref": "#/components/parameters/redirect"
                },
                {
                  "$ref": "#/components/parameters/clientURL"
                },
                {
                  "$ref": "#/components/parameters/joinViaHtml5",
                  "deprecated": true
                },
                {
                  "$ref": "#/components/parameters/guest"
                },
                {
                  "$ref": "#/components/parameters/role"
                },
                {
                  "$ref": "#/components/parameters/excludeFromDashboard"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <messageKey>successfullyJoined</messageKey>\n  <message>You have joined successfully.</message>\n  <meeting_id>640ab2bae07bedc4c163f679a746f7ab7fb5d1fa-1531155809613</meeting_id>\n  <user_id>w_euxnssffnsbs</user_id>\n  <auth_token>14mm5y3eurjw</auth_token>\n  <session_token>ai1wqj8wb6s7rnk0</session_token>\n  <url>https://yourserver.com/client/BigBlueButton.html?sessionToken=ai1wqj8wb6s7rnk0</url>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/join"
                      }
                    }
                  }
                },
                "302": {
                  "description": "Successful redirect"
                }
              }
            }
          },
          "/getRecordings": {
            "get": {
              "summary": "getRecordings",
              "operationId": "getRecordings",
              "description": "Retrieves the recordings that are available for playback for a given `meetingID` (or set of `meetingID`s).\n\n### Pagination\nThis call can be paginated using the `limit` and `offset` parameters.\n",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID-getRecordings"
                },
                {
                  "$ref": "#/components/parameters/meetingIDWildcard"
                },
                {
                  "description": "A record ID for get the recordings. It can be a set of recordIDs separate by commas. If the record ID is not specified, it will use meeting ID as the main criteria. If neither the meeting ID is specified, it will get ALL the recordings. The recordID can also be used as a wildcard by including only the first characters in the string.",
                  "$ref": "#/components/parameters/recordID"
                },
                {
                  "$ref": "#/components/parameters/state"
                },
                {
                  "$ref": "#/components/parameters/meta"
                },
                {
                  "$ref": "#/components/parameters/limit"
                },
                {
                  "$ref": "#/components/parameters/offset"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <nextPage>false</nextPage>\n  <recordings>\n      <recording>\n        <recordID>ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124</recordID>\n        <meetingID>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingID>\n        <internalMeetingID>ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124</internalMeetingID>\n        <name>Fred's Room</name>\n        <isBreakout>false</isBreakout>\n        <published>true</published>\n        <state>published</state>\n        <startTime>1530718721124</startTime>\n        <endTime>1530718810456</endTime>\n        <participants>3</participants>\n        <metadata>\n            <isBreakout>false</isBreakout>\n            <meetingName>Fred's Room</meetingName>\n            <gl-listed>false</gl-listed>\n            <meetingId>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingId>\n        </metadata>\n        <playback>\n            <format>\n              <type>podcast</type>\n              <url>https://demo.bigbluebutton.org/podcast/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/audio.ogg</url>\n              <processingTime>0</processingTime>\n              <length>0</length>\n            </format>\n            <format>\n              <type>presentation</type>\n              <url>https://demo.bigbluebutton.org/playback/presentation/2.0/playback.html?meetingId=ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124</url>\n              <processingTime>7177</processingTime>\n              <length>0</length>\n              <preview>\n                  <images>\n                    <image alt=\"Welcome to\" height=\"136\" width=\"176\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-1.png</image>\n                    <image alt=\"(this slide left blank for use as a whiteboard)\" height=\"136\" width=\"176\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-2.png</image>\n                    <image alt=\"(this slide left blank for use as a whiteboard)\" height=\"136\" width=\"176\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-3.png</image>\n                  </images>\n              </preview>\n            </format>\n        </playback>\n      </recording>\n      <recording>\n        <recordID>ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111</recordID>\n        <meetingID>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingID>\n        <internalMeetingID>ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111</internalMeetingID>\n        <name>Fred's Room</name>\n        <isBreakout>false</isBreakout>\n        <published>true</published>\n        <state>published</state>\n        <startTime>1530278898111</startTime>\n        <endTime>1530281194326</endTime>\n        <participants>7</participants>\n        <metadata>\n            <meetingName>Fred's Room</meetingName>\n            <isBreakout>false</isBreakout>\n            <gl-listed>true</gl-listed>\n            <meetingId>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingId>\n        </metadata>\n        <playback>\n            <format>\n              <type>podcast</type>\n              <url>https://demo.bigbluebutton.org/podcast/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/audio.ogg</url>\n              <processingTime>0</processingTime>\n              <length>33</length>\n            </format>\n            <format>\n              <type>presentation</type>\n              <url>https://demo.bigbluebutton.org/playback/presentation/2.0/playback.html?meetingId=ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111</url>\n              <processingTime>139458</processingTime>\n              <length>33</length>\n              <preview>\n                  <images>\n                    <image width=\"176\" height=\"136\" alt=\"Welcome to\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-1.png</image>\n                    <image width=\"176\" height=\"136\" alt=\"(this slide left blank for use as a whiteboard)\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-2.png</image>\n                    <image width=\"176\" height=\"136\" alt=\"(this slide left blank for use as a whiteboard)\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-3.png</image>\n                  </images>\n              </preview>\n            </format>\n        </playback>\n      </recording>\n  </recordings>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getRecordings"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "getRecordings",
              "operationId": "getRecordings",
              "description": "Retrieves the recordings that are available for playback for a given `meetingID` (or set of `meetingID`s).\n\n### Pagination\nThis call can be paginated using the `limit` and `offset` parameters.\n",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID-getRecordings"
                },
                {
                  "$ref": "#/components/parameters/meetingIDWildcard"
                },
                {
                  "description": "A record ID for get the recordings. It can be a set of recordIDs separate by commas. If the record ID is not specified, it will use meeting ID as the main criteria. If neither the meeting ID is specified, it will get ALL the recordings. The recordID can also be used as a wildcard by including only the first characters in the string.",
                  "$ref": "#/components/parameters/recordID"
                },
                {
                  "$ref": "#/components/parameters/state"
                },
                {
                  "$ref": "#/components/parameters/meta"
                },
                {
                  "$ref": "#/components/parameters/limit"
                },
                {
                  "$ref": "#/components/parameters/offset"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <nextPage>false</nextPage>\n  <recordings>\n      <recording>\n        <recordID>ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124</recordID>\n        <meetingID>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingID>\n        <internalMeetingID>ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124</internalMeetingID>\n        <name>Fred's Room</name>\n        <isBreakout>false</isBreakout>\n        <published>true</published>\n        <state>published</state>\n        <startTime>1530718721124</startTime>\n        <endTime>1530718810456</endTime>\n        <participants>3</participants>\n        <metadata>\n            <isBreakout>false</isBreakout>\n            <meetingName>Fred's Room</meetingName>\n            <gl-listed>false</gl-listed>\n            <meetingId>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingId>\n        </metadata>\n        <playback>\n            <format>\n              <type>podcast</type>\n              <url>https://demo.bigbluebutton.org/podcast/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/audio.ogg</url>\n              <processingTime>0</processingTime>\n              <length>0</length>\n            </format>\n            <format>\n              <type>presentation</type>\n              <url>https://demo.bigbluebutton.org/playback/presentation/2.0/playback.html?meetingId=ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124</url>\n              <processingTime>7177</processingTime>\n              <length>0</length>\n              <preview>\n                  <images>\n                    <image alt=\"Welcome to\" height=\"136\" width=\"176\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-1.png</image>\n                    <image alt=\"(this slide left blank for use as a whiteboard)\" height=\"136\" width=\"176\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-2.png</image>\n                    <image alt=\"(this slide left blank for use as a whiteboard)\" height=\"136\" width=\"176\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-3.png</image>\n                  </images>\n              </preview>\n            </format>\n        </playback>\n      </recording>\n      <recording>\n        <recordID>ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111</recordID>\n        <meetingID>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingID>\n        <internalMeetingID>ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111</internalMeetingID>\n        <name>Fred's Room</name>\n        <isBreakout>false</isBreakout>\n        <published>true</published>\n        <state>published</state>\n        <startTime>1530278898111</startTime>\n        <endTime>1530281194326</endTime>\n        <participants>7</participants>\n        <metadata>\n            <meetingName>Fred's Room</meetingName>\n            <isBreakout>false</isBreakout>\n            <gl-listed>true</gl-listed>\n            <meetingId>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</meetingId>\n        </metadata>\n        <playback>\n            <format>\n              <type>podcast</type>\n              <url>https://demo.bigbluebutton.org/podcast/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/audio.ogg</url>\n              <processingTime>0</processingTime>\n              <length>33</length>\n            </format>\n            <format>\n              <type>presentation</type>\n              <url>https://demo.bigbluebutton.org/playback/presentation/2.0/playback.html?meetingId=ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111</url>\n              <processingTime>139458</processingTime>\n              <length>33</length>\n              <preview>\n                  <images>\n                    <image width=\"176\" height=\"136\" alt=\"Welcome to\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-1.png</image>\n                    <image width=\"176\" height=\"136\" alt=\"(this slide left blank for use as a whiteboard)\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-2.png</image>\n                    <image width=\"176\" height=\"136\" alt=\"(this slide left blank for use as a whiteboard)\">https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-3.png</image>\n                  </images>\n              </preview>\n            </format>\n        </playback>\n      </recording>\n  </recordings>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getRecordings"
                      }
                    }
                  }
                }
              }
            }
          },
          "/publishRecordings": {
            "get": {
              "summary": "publishRecordings",
              "operationId": "publishRecordings",
              "description": "Publish and unpublish recordings for a given recordID (or set of record IDs).",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "description": "A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas.",
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/publish",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <published>true</published>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/publishRecordings"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "publishRecordings",
              "operationId": "publishRecordings",
              "description": "Publish and unpublish recordings for a given recordID (or set of record IDs).",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "description": "A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas.",
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/publish",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <published>true</published>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/publishRecordings"
                      }
                    }
                  }
                }
              }
            }
          },
          "/deleteRecordings": {
            "get": {
              "summary": "deleteRecordings",
              "operationId": "deleteRecordings",
              "description": "Delete one or more recordings for a given recordID (or set of record IDs).",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "description": "A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas.",
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <deleted>true</deleted>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/deleteRecordings"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "deleteRecordings",
              "operationId": "deleteRecordings",
              "description": "Delete one or more recordings for a given recordID (or set of record IDs).",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "description": "A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas.",
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <deleted>true</deleted>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/deleteRecordings"
                      }
                    }
                  }
                }
              }
            }
          },
          "/updateRecordings": {
            "get": {
              "summary": "updateRecordings",
              "operationId": "updateRecordings",
              "description": "Update metadata for a given recordID (or set of record IDs).",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "description": "A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas."
                },
                {
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/updateRecordings-meta",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <updated>true</updated>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/updateRecordings"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "updateRecordings",
              "operationId": "updateRecordings",
              "description": "Update metadata for a given recordID (or set of record IDs).",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "description": "A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas.",
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/updateRecordings-meta",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <updated>true</updated>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/updateRecordings"
                      }
                    }
                  }
                }
              }
            }
          },
          "/getRecordingToken": {
            "get": {
              "summary": "getRecordingToken",
              "operationId": "getRecordingToken",
              "description": "<div style=\"\n    background-color: #cff4fc;\n    color: #033b46;\n    padding: 20px;\n    font-size: 16px;\n    border-left: 0.25rem solid #9eeaf9\n    \">\n    This is a custom Elos call, which means it is not supported by the standard BigBlueButton API\n</div>\n\nThis call returns a JWT which gives access to the recording of the specified meeting.",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/authUser"
                },
                {
                  "$ref": "#/components/parameters/action"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS<returncode>\n  <token>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoX21lZXRpbmdfaWQiOiJteXJlY29yZDEiLCJleHAiOjE2NDUxOTk4NDcsImlhdCI6MTY0NTE5OTg0Nywic3ViIjoidGVzdCJ9.2beKKCM36mGKBLWqQASyyiKA2YuCWKREUqyHz8NjF2E</token>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getRecordingToken"
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "getRecordingToken",
              "operationId": "getRecordingToken",
              "description": "<div style=\"\n    background-color: #cff4fc;\n    color: #033b46;\n    padding: 20px;\n    font-size: 16px;\n    border-left: 0.25rem solid #9eeaf9\n    \">\n    This is a custom Elos call, which means it is not supported by the standard BigBlueButton API\n</div>\n\nThis call returns a JWT which gives access to the recording of the specified meeting.",
              "tags": [
                "recording"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/recordID-required"
                },
                {
                  "$ref": "#/components/parameters/authUser"
                },
                {
                  "$ref": "#/components/parameters/action"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS<returncode>\n  <token>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoX21lZXRpbmdfaWQiOiJteXJlY29yZDEiLCJleHAiOjE2NDUxOTk4NDcsImlhdCI6MTY0NTE5OTg0Nywic3ViIjoidGVzdCJ9.2beKKCM36mGKBLWqQASyyiKA2YuCWKREUqyHz8NjF2E</token>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/getRecordingToken"
                      }
                    }
                  }
                }
              }
            }
          },
          "/callback_events": {
            "post": {
              "operationId": "callback_events",
              "tags": [
                "callbacks"
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/callback"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Successful response"
                },
                "401": {
                  "description": "Unauthorized"
                },
                "500": {
                  "description": "Internal server error"
                }
              },
              "security": [
                {
                  "Bearer": []
                }
              ]
            }
          },
          "/hooks/create": {
            "get": {
              "summary": "create",
              "operationId": "hooks-create",
              "description": "Create a Hook to receive events of meetings based on scope.",
              "tags": [
                "hooks"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/callbackURL",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/meetingID"
                },
                {
                  "$ref": "#/components/parameters/enabled"
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <hookID>1</hookID>\n  <hookGUID>f4fd4b8a-5c8e-4930-8f33-4f133d5d9b57</hookGUID>\n  <authToken>e74963291b18e915d9470585ffd33b87d69f1cd6</authToken>\n  <sharedSecretGUID>ed3cef25-9376-4efb-be8b-d5914524e1b9</sharedSecretGUID>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/createHook"
                      }
                    }
                  }
                }
              }
            }
          },
          "/hooks/list": {
            "get": {
              "summary": "list",
              "operationId": "hooks-list",
              "description": "List all the hooks your credentials have access to.",
              "tags": [
                "hooks"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <hooks>\n   <hook>\n     <hookID>1</hookID>\n     <hookGUID>f4fd4b8a-5c8e-4930-8f33-4f133d5d9b57</hookGUID>\n     <authToken>e74963291b18e915d9470585ffd33b87d69f1cd6</authToken>\n     <callbackURL>https://webhook-test.test.webhook/test/hook</callbackURL>\n     <sharedSecretGUID>ed3cef25-9376-4efb-be8b-d5914524e1b9</sharedSecretGUID>\n     <enabled>true</enabled>\n   </hook>\n  </hooks>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/list"
                      }
                    }
                  }
                }
              }
            }
          },
          "/hooks/destroy": {
            "get": {
              "summary": "destroy",
              "operationId": "hooks-destroy",
              "description": "Delete a specific hook based on the given hook ID.",
              "tags": [
                "hooks"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/hookID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <removed>true</removed>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/destroy"
                      }
                    }
                  }
                }
              }
            }
          },
          "/hooks/enable": {
            "get": {
              "summary": "enable",
              "operationId": "hooks-enable",
              "description": "Enables a Hook to receive meetings events.",
              "tags": [
                "hooks"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/hookID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <enabled>true</enabled>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/enableHook"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Missing Hook ID",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "fail": {
                          "value": "<response>\n  <returncode>FAILED</returncode>\n  <messageKey>missingParamHookID</messageKey>\n  <message>You must specify a hookID in the parameters.</message>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/enableHookError"
                      }
                    }
                  }
                },
                "401": {
                  "description": "Checksum check failed",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "fail": {
                          "value": "<response>\n  <returncode>FAILED</returncode>\n  <messageKey>checksumError</messageKey>\n  <message>You did not pass the checksum security check</message>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/enableHookError"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Hook Not Found",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "fail": {
                          "value": "<response>\n  <returncode>FAILED</returncode>\n  <messageKey>enableMissingHook</messageKey>\n  <message>The hook informed was not found or the shared secret didn't match the hook's.</message>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/enableHookError"
                      }
                    }
                  }
                },
                "422": {
                  "description": "Invalid Hook ID",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "fail": {
                          "value": "<response>\n  <returncode>FAILED</returncode>\n  <messageKey>invalidParamHookID</messageKey>\n  <message>You must specify a valid hookID in the parameters.</message>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/enableHookError"
                      }
                    }
                  }
                },
                "500": {
                  "description": "Couldn't enable hook",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "fail": {
                          "value": "<response>\n  <returncode>FAILED</returncode>\n  <messageKey>enableHookError</messageKey>\n  <message>An error happened while enabling your hook. Please contact the system's administrators.</message>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/enableHookError"
                      }
                    }
                  }
                }
              }
            }
          },
          "/getDefaultConfigXML": {
            "get": {
              "summary": "getDefaultConfigXML",
              "operationId": "getDefaultConfigXML",
              "description": "Retrieve the default `config.xml`.",
              "deprecated": true,
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<config>\n  <localeversion suppressWarning=\"false\">0.8</localeversion>\n  <version>1645198357</version>\n  <help url=\"http://api.rna1.blindsidenetworks.com/help.html\"/>\n  <porttest host=\"api.rna1.blindsidenetworks.com\" application=\"video/portTest\" timeout=\"10000\"/>\n  <bwMon server=\"api.rna1.blindsidenetworks.com\" application=\"video/bwTest\"/>\n  <application uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\" host=\"http://api.rna1.blindsidenetworks.com/bigbluebutton/api/enter\"/>\n  <language userSelectionEnabled=\"true\"/>\n  <skinning enabled=\"true\" url=\"http://api.rna1.blindsidenetworks.com/client/branding/css/BBBDefault.css.swf\"/>\n  <shortcutKeys showButton=\"true\"/>\n  <layout showLogButton=\"false\" showVideoLayout=\"false\" showResetLayout=\"true\" defaultLayout=\"Default\" showToolbar=\"true\" showFooter=\"true\" showHelpButton=\"true\" showLogoutWindow=\"true\" showLayoutTools=\"true\" showNetworkMonitor=\"false\"/>\n  <modules>\n    <module name=\"ChatModule\" url=\"http://api.rna1.blindsidenetworks.com/client/ChatModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\" dependsOn=\"UsersModule\" translationOn=\"false\" translationEnabled=\"false\" privateEnabled=\"true\" position=\"top-right\" baseTabIndex=\"701\"/>\n    <module name=\"UsersModule\" url=\"http://api.rna1.blindsidenetworks.com/client/UsersModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\" allowKickUser=\"true\"/>\n    <module name=\"DeskShareModule\" url=\"http://api.rna1.blindsidenetworks.com/client/DeskShareModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/deskShare\" showButton=\"true\" autoStart=\"false\" baseTabIndex=\"101\"/>\n    <module name=\"PhoneModule\" url=\"http://api.rna1.blindsidenetworks.com/client/PhoneModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/sip\" autoJoin=\"true\" skipCheck=\"false\" showButton=\"true\" enabledEchoCancel=\"true\" dependsOn=\"UsersModule\"/>\n    <module name=\"VideoconfModule\" url=\"http://api.rna1.blindsidenetworks.com/client/VideoconfModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/video\" dependson=\"UsersModule\" videoQuality=\"100\" presenterShareOnly=\"false\" controlsForPresenter=\"false\" resolutions=\"320x240,640x480,1280x720\" autoStart=\"false\" showButton=\"true\" showCloseButton=\"true\" publishWindowVisible=\"true\" viewerWindowMaxed=\"false\" viewerWindowLocation=\"top\" camKeyFrameInterval=\"30\" camModeFps=\"10\" camQualityBandwidth=\"0\" camQualityPicture=\"90\" smoothVideo=\"false\" applyConvolutionFilter=\"false\" convolutionFilter=\"-1, 0, -1, 0, 6, 0, -1, 0, -1\" filterBias=\"0\" filterDivisor=\"4\" enableH264=\"true\" h264Level=\"2.1\" h264Profile=\"main\" displayAvatar=\"false\" focusTalking=\"false\" glowColor=\"0x4A931D\" glowBlurSize=\"30.0\"/>\n    <module name=\"WhiteboardModule\" url=\"http://api.rna1.blindsidenetworks.com/client/WhiteboardModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\" dependsOn=\"PresentModule\" baseTabIndex=\"601\"/>\n    <!--    <module name=\"PollingModule\" url=\"http://api.rna1.blindsidenetworks.com/client/PollingModule.swf?v=1645198357\"       uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\"       dependsOn=\"PresentModule\"    />-->\n    <module name=\"PresentModule\" url=\"http://api.rna1.blindsidenetworks.com/client/PresentModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\" host=\"http://api.rna1.blindsidenetworks.com\" showPresentWindow=\"true\" showWindowControls=\"true\" dependsOn=\"UsersModule\" baseTabIndex=\"501\" maxFileSize=\"30\"/>\n    <module name=\"VideodockModule\" url=\"http://api.rna1.blindsidenetworks.com/client/VideodockModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\" dependsOn=\"VideoconfModule, UsersModule\" autoDock=\"true\" showControls=\"true\" maximizeWindow=\"false\" position=\"bottom-right\" width=\"172\" height=\"179\" layout=\"smart\" oneAlwaysBigger=\"false\" baseTabIndex=\"401\"/>\n    <module name=\"LayoutModule\" url=\"http://api.rna1.blindsidenetworks.com/client/LayoutModule.swf?v=1645198357\" uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\" layoutConfig=\"http://api.rna1.blindsidenetworks.com/client/conf/layout.xml\" enableEdit=\"false\"/>\n    <!--    <module name=\"NotesModule\" url=\"http://api.rna1.blindsidenetworks.com/client/NotesModule.swf?v=1645198357\"      saveURL=\"http://api.rna1.blindsidenetworks.com\"      position=\"top-left\"    /><module name=\"BroadcastModule\" url=\"http://api.rna1.blindsidenetworks.com/client/BroadcastModule.swf?v=1645198357\"      uri=\"rtmp://api.rna1.blindsidenetworks.com/bigbluebutton\"      streamsUri=\"http://api.rna1.blindsidenetworks.com/streams.xml\"      position=\"top-left\"      showStreams=\"true\"      autoPlay=\"false\"      dependsOn=\"UsersModule\"    />-->\n  </modules>\n</config>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/configXML"
                      }
                    }
                  }
                }
              }
            }
          },
          "/setConfigXML": {
            "post": {
              "summary": "setConfigXML",
              "operationId": "setConfigXML",
              "description": "Associate a custom `config.xml` file with the current session. This call returns a token that can later be passed as a parameter to a join URL. When passed as a parameter, the BigBlueButton client will use the associated `config.xml` for the user instead of using the default `config.xml`. This enables 3rd party applications to provide user-specific `config.xml` files.",
              "deprecated": true,
              "tags": [
                "meeting"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/meetingID",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/configXML",
                  "required": true
                },
                {
                  "$ref": "#/components/parameters/checksum"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "examples": {
                        "success": {
                          "value": "<response>\n  <returncode>SUCCESS</returncode>\n  <token>6lwBf1TX</token>\n</response>"
                        }
                      },
                      "schema": {
                        "$ref": "#/components/schemas/setConfigXML"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "components": {
          "securitySchemes": {
            "Bearer": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          },
          "schemas": {
            "version": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "atendee": {
              "type": "object",
              "required": [
                "userID",
                "fullName",
                "role",
                "isPresenter",
                "isListeningOnly",
                "hasJoinedVoice",
                "hasVideo",
                "clientType",
                "customData"
              ],
              "properties": {
                "userID": {
                  "type": "integer",
                  "format": "int64"
                },
                "fullName": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                },
                "isPresenter": {
                  "type": "boolean"
                },
                "isListeningOnly": {
                  "type": "boolean"
                },
                "hasJoinedVoice": {
                  "type": "boolean"
                },
                "hasVideo": {
                  "type": "boolean"
                },
                "customData": {
                  "type": "object"
                }
              }
            },
            "atendees": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/components/schemas/atendee"
              }
            },
            "meeting": {
              "type": "object",
              "required": [
                "meetingName",
                "meetingID",
                "internalMeetingID",
                "createTime",
                "createDate",
                "voiceBridge",
                "dialNumber",
                "attendeePW",
                "moderatorPW",
                "running",
                "duration",
                "hasUserJoined",
                "recording",
                "hasBeenForciblyEnded",
                "startTime",
                "endTime",
                "participantCount",
                "listenerCount",
                "voiceParticipantCount",
                "videoCount",
                "maxUsers",
                "moderatorCount",
                "attendees",
                "metadata",
                "isBreakout"
              ],
              "properties": {
                "meetingName": {
                  "type": "string"
                },
                "meetingID": {
                  "type": "string"
                },
                "internalMeetingID": {
                  "type": "string"
                },
                "createTime": {
                  "type": "string"
                },
                "createDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "voiceBridge": {
                  "type": "string"
                },
                "dialNumber": {
                  "type": "string"
                },
                "attendeePW": {
                  "type": "string"
                },
                "moderatorPW": {
                  "type": "string"
                },
                "running": {
                  "type": "boolean"
                },
                "duration": {
                  "type": "integer",
                  "format": "int32"
                },
                "hasUserJoined": {
                  "type": "boolean"
                },
                "recording": {
                  "type": "boolean"
                },
                "hasBeenForciblyEnded": {
                  "type": "boolean"
                },
                "startTime": {
                  "type": "string"
                },
                "endTime": {
                  "type": "string"
                },
                "participantCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "listenerCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "voiceParticipantCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "videoCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "maxUsers": {
                  "type": "integer",
                  "format": "int32"
                },
                "moderatorCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "atendees": {
                  "$ref": "#/components/schemas/atendees"
                },
                "metaData": {
                  "type": "object"
                },
                "isBreakout": {
                  "type": "boolean"
                },
                "transfer": {
                  "type": "boolean"
                },
                "transferCount": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "getMeetings": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "meetings"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "meetings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/meeting"
                      }
                    }
                  }
                }
              }
            },
            "preview": {
              "type": "object",
              "properties": {
                "images": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "playback": {
              "type": "object",
              "required": [
                "format"
              ],
              "properties": {
                "format": {
                  "type": "object",
                  "required": [
                    "type",
                    "url",
                    "processingTime",
                    "length",
                    "size",
                    "preview"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "presentation",
                        "video"
                      ]
                    },
                    "url": {
                      "type": "string"
                    },
                    "processingTime": {
                      "type": "integer"
                    },
                    "length": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "preview": {
                      "$ref": "#/components/schemas/preview"
                    }
                  }
                }
              }
            },
            "recording": {
              "type": "object",
              "required": [
                "recordID",
                "meetingID",
                "internalMeetingID",
                "name",
                "isBreakout",
                "published",
                "state",
                "startTime",
                "endTime",
                "size",
                "rawSize",
                "participants",
                "metadata"
              ],
              "properties": {
                "recordID": {
                  "type": "string"
                },
                "meetingID": {
                  "type": "string"
                },
                "internalMeetingID": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "isBreakout": {
                  "type": "boolean"
                },
                "published": {
                  "type": "boolean"
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "unpublished",
                    "published",
                    "processing",
                    "deleted"
                  ]
                },
                "startTime": {
                  "type": "integer"
                },
                "endTime": {
                  "type": "integer"
                },
                "size": {
                  "type": "integer"
                },
                "rawSize": {
                  "type": "integer"
                },
                "participants": {
                  "type": "integer"
                },
                "metadata": {
                  "type": "object"
                },
                "playback": {
                  "$ref": "#/components/schemas/playback"
                }
              }
            },
            "meetingData": {
              "type": "object",
              "required": [
                "meeting"
              ],
              "properties": {
                "meeting": {
                  "$ref": "#/components/schemas/meeting"
                },
                "recording": {
                  "$ref": "#/components/schemas/recording"
                }
              }
            },
            "getAllMeetings": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "nextPage",
                    "meetings"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "nextPage": {
                      "type": "boolean"
                    },
                    "meetings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/meetingData"
                      }
                    }
                  }
                }
              }
            },
            "isMeetingRunning": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "running"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "running": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "getMeetingInfo": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "meeting"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "meeting": {
                      "$ref": "#/components/schemas/meeting"
                    }
                  }
                }
              }
            },
            "create": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "meetingID",
                    "internalMeetingID",
                    "parentMeetingID",
                    "attendeePW",
                    "moderatorPW",
                    "createTime",
                    "voiceBridge",
                    "dialNumber",
                    "createDate",
                    "hasUserJoined",
                    "duration",
                    "hasBeenForciblyEnded"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "meetingID": {
                      "type": "string"
                    },
                    "internalMeetingID": {
                      "type": "string"
                    },
                    "parentMeetingID": {
                      "type": "string"
                    },
                    "attendeePW": {
                      "type": "string"
                    },
                    "moderatorPW": {
                      "type": "string"
                    },
                    "createTime": {
                      "type": "string"
                    },
                    "voiceBridge": {
                      "type": "string"
                    },
                    "dialNumber": {
                      "type": "string"
                    },
                    "createDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "hasUserJoined": {
                      "type": "boolean"
                    },
                    "duration": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "hasBeenForciblyEnded": {
                      "type": "boolean"
                    },
                    "messageKey": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "end": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "messageKey": {
                      "type": "string",
                      "enum": [
                        "sentEndMeetingRequest"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "join": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "messageKey",
                    "message",
                    "meeting_id",
                    "user_id",
                    "auth_token",
                    "session_token",
                    "url"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "messageKey": {
                      "type": "string",
                      "enum": [
                        "successfullyJoined"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "meeting_id": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    },
                    "auth_token": {
                      "type": "string"
                    },
                    "session_token": {
                      "type": "string"
                    },
                    "guestStatus": {
                      "description": "Only when `guest` parameter is set to `true`.",
                      "type": "string",
                      "enum": [
                        "ALLOW",
                        "WAIT",
                        "DENY"
                      ]
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "getRecordings": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "nextPage",
                    "recordings"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "nextPage": {
                      "type": "boolean"
                    },
                    "recordings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/recording"
                      }
                    }
                  }
                }
              }
            },
            "publishRecordings": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "published"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "published": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "deleteRecordings": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "deleted"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "updateRecordings": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "updated"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "updated": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "getRecordingToken": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "token"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string",
                      "format": "JWT"
                    }
                  }
                }
              }
            },
            "callback": {
              "type": "object",
              "properties": {
                "internal_meeting_id": {
                  "type": "string",
                  "description": "Internal meeting identifier"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "mconf_shared_secret_guid": {
                          "type": "string",
                          "description": "Shared secret GUID"
                        },
                        "internal_analytics_callback_url": {
                          "type": "string",
                          "description": "Internal callback URL"
                        },
                        "analytics_callback_url": {
                          "type": "string",
                          "description": "Callback URL"
                        }
                      },
                      "required": [
                        "mconf_shared_secret_guid",
                        "internal_callback_url",
                        "callback_url"
                      ]
                    }
                  },
                  "required": [
                    "metadata"
                  ]
                }
              },
              "required": [
                "internal_meeting_id",
                "data"
              ]
            },
            "createHook": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "hookID",
                    "hookGUID",
                    "authToken",
                    "sharedSecretGUID"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "hookID": {
                      "type": "string"
                    },
                    "hookGUID": {
                      "type": "string"
                    },
                    "authToken": {
                      "type": "string"
                    },
                    "sharedSecretGUID": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "hook": {
              "type": "object",
              "required": [
                "hookID",
                "hookGUID",
                "authToken",
                "callbackURL",
                "enabled"
              ],
              "properties": {
                "hookID": {
                  "type": "string"
                },
                "hookGUID": {
                  "type": "string"
                },
                "authToken": {
                  "type": "string"
                },
                "callbackURL": {
                  "type": "string"
                },
                "sharedSecretGUID": {
                  "type": "string"
                },
                "externalMeetingID": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                }
              }
            },
            "hooks": {
              "type": "object",
              "required": [
                "hook"
              ],
              "properties": {
                "hook": {
                  "$ref": "#/components/schemas/hook"
                }
              }
            },
            "list": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "hooks"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "hooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/hooks"
                      }
                    }
                  }
                }
              }
            },
            "destroy": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "removed"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "removed": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "enableHook": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "hookID"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "hookID": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "enableHookError": {
              "type": "object",
              "required": [
                "response",
                "messageKey",
                "message"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "messageKey": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "configXML": {
              "type": "object"
            },
            "setConfigXML": {
              "type": "object",
              "required": [
                "response"
              ],
              "properties": {
                "response": {
                  "type": "object",
                  "required": [
                    "returncode",
                    "token"
                  ],
                  "properties": {
                    "returncode": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "parameters": {
            "checksum": {
              "name": "checksum",
              "in": "query",
              "description": "SHA-1 value calculated for validation in the API.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "meetingID": {
              "name": "meetingID",
              "in": "query",
              "description": "ID(s) of the meeting. Multiple IDs can be provided, separated by commas.",
              "schema": {
                "type": "string"
              }
            },
            "meetingIDWildcard": {
              "name": "meetingIDWildcard",
              "in": "query",
              "description": "If true, `meetingID` will be treated as a wildcard and used as a prefix when matching the resources (i.e. it will run a query similar to `LIKE 'meetingID%'`).",
              "schema": {
                "type": "boolean"
              }
            },
            "meetingName": {
              "name": "meetingName",
              "in": "query",
              "description": "Name(s) of the meeting. Multiple names can be provided, separated by commas. Filters meetings by exact name.",
              "schema": {
                "type": "string"
              }
            },
            "meetingNameWildcard": {
              "name": "meetingNameWildcard",
              "in": "query",
              "description": "If true, `meetingName` will be treated as a wildcard and used as a prefix when matching the resources (i.e. it will run a query similar to `LIKE 'meetingName%'`).",
              "schema": {
                "type": "boolean"
              }
            },
            "meta": {
              "name": "meta",
              "in": "query",
              "description": "This is a special parameter that allows the definition of metadata for a meeting. There is no parameter named just `meta`, `meta` is used as a prefix.\n\nExamples of the use of the meta parameters are `meta_Presenter=Jane%20Doe`, `meta_category-group=FINANCE`, and `meta_TERM=Fall2016`.\n\nWhen defining metadata names, use only numbers and letters and the character `-`. Do not use `_`.\n",
              "schema": {
                "type": "string"
              }
            },
            "includeRecordings": {
              "name": "includeRecordings",
              "in": "query",
              "description": "Defines if the recordings must be included in the response.",
              "schema": {
                "type": "boolean"
              }
            },
            "limit": {
              "name": "limit",
              "in": "query",
              "description": "Maximum number of rows to return in the response.",
              "schema": {
                "type": "integer"
              }
            },
            "offset": {
              "name": "offset",
              "in": "query",
              "description": "Number of rows to skip before start retrieving rows.",
              "schema": {
                "type": "integer"
              }
            },
            "sortBy": {
              "name": "sort_by",
              "in": "query",
              "description": "Which field to sort by",
              "schema": {
                "type": "string",
                "enum": [
                  "name",
                  "start_time"
                ]
              }
            },
            "orderBy": {
              "name": "order_by",
              "in": "query",
              "description": "Set ascending or descending order",
              "schema": {
                "type": "enum",
                "enum": [
                  "asc",
                  "desc"
                ]
              }
            },
            "startTime": {
              "name": "start_time",
              "in": "query",
              "description": "Date to filter meetings (format: YYYY-MM-DD). If used alone, only meetings from that day will be retrieved.",
              "schema": {
                "type": "string",
                "format": "date",
                "example": "2024-10-21"
              }
            },
            "endTime": {
              "name": "end_time",
              "in": "query",
              "description": "Date to filter meetings (format: YYYY-MM-DD).",
              "schema": {
                "type": "string",
                "format": "date",
                "example": "2024-10-21"
              }
            },
            "onlyRecorded": {
              "name": "onlyRecorded",
              "in": "query",
              "description": "Filters the results to include only recorded meetings. This parameter is effective only when `includeRecordings=true`.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "name": {
              "name": "name",
              "in": "query",
              "description": "Name of the meeting that will be created.",
              "schema": {
                "type": "string"
              }
            },
            "meetingID-create": {
              "name": "meetingID",
              "in": "query",
              "description": "A meeting ID that can be used to identify this meeting by the 3rd-party application. It must be unique for each meeting: different active meetings can not have the same meeting ID. Meeting IDs should only contain upper/lower ASCII letters, numbers, dashes, or underscores. A good choice for the meeting ID is to use GUID value.",
              "schema": {
                "type": "string"
              }
            },
            "attendeePW": {
              "name": "attendeePW",
              "in": "query",
              "description": "A secret string that can be used later on the [join](#operation/join) API call to indicate that the user should be an attendee. If no `attendeePW` is provided, a random string will be used and returned.",
              "schema": {
                "type": "string"
              }
            },
            "moderatorPW": {
              "name": "moderatorPW",
              "in": "query",
              "description": "A secret string that can be used later on the [join](#operation/join) API call to indicate that the user should be a moderator. If no `moderatorPW` is provided, a random string will be used and returned.",
              "schema": {
                "type": "string"
              }
            },
            "welcome": {
              "name": "welcome",
              "in": "query",
              "description": "A welcome message that gets displayed on the chat window when the participant joins. You can include keywords (`%%CONFNAME%%`, `%%DIALNUM%%`, `%%CONFNUM%%`) which will be substituted automatically.\n\nThe welcome message has limited support for HTML formatting. Be careful about copy/pasted HTML from e.g. MS Word, as it can easily exceed the maximum supported URL length when used on a GET request.",
              "schema": {
                "type": "string"
              }
            },
            "dialNumber": {
              "name": "dialNumber",
              "in": "query",
              "description": "The dial access number that participants can call in using regular phone",
              "schema": {
                "type": "string"
              }
            },
            "voiceBridge": {
              "name": "voiceBridge",
              "in": "query",
              "description": "Unique number for the in the range of 10000 to 99999 for the FreeSWITCH voice conference associated with this meeting",
              "schema": {
                "type": "string"
              }
            },
            "maxParticipants": {
              "name": "maxParticipants",
              "in": "query",
              "description": "Set the maximum number of users allowed to join the conference at the same time.",
              "schema": {
                "type": "integer"
              }
            },
            "logoutURL": {
              "name": "logoutURL",
              "in": "query",
              "description": "The URL to which users are redirected after leaving the conference.",
              "schema": {
                "type": "string"
              }
            },
            "record": {
              "name": "record",
              "in": "query",
              "description": "Setting `record=true` allows users to record this conference. Only users with permission are able to start and stop recording.\n\nIn order for a playback file to be generated, a moderator must click the Start/Stop Recording button at least once during the sesssion; otherwise, in the absence of any recording marks, no playback file will be generated.\n",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "duration": {
              "name": "duration",
              "in": "query",
              "description": "The maximum length (in minutes) for the meeting.\n\nBigBlueButton begins tracking the length of a meeting when it is created. If `duration` contains a non-zero value, then when the length of the meeting exceeds the duration value the server will immediately end the meeting (equivalent to receiving an end API request at that moment).",
              "schema": {
                "type": "integer",
                "default": 0
              }
            },
            "isBreakout": {
              "name": "isBreakout",
              "in": "query",
              "description": "Must be set to `true` to create a breakout room.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "parentMeetingID": {
              "name": "parentMeetingID",
              "in": "query",
              "description": "Must be provided when creating a breakout room, the parent room must be running.",
              "schema": {
                "type": "string"
              }
            },
            "sequence": {
              "name": "sequence",
              "in": "query",
              "description": "The sequence number of the breakout room.",
              "schema": {
                "type": "integer"
              }
            },
            "freeJoin": {
              "name": "freeJoin",
              "in": "query",
              "description": "If set to true, the client will give the user the choice to choose the breakout rooms he wants to join.",
              "schema": {
                "type": "boolean"
              }
            },
            "breakoutRoomsEnabled": {
              "name": "breakoutRoomsEnabled",
              "in": "query",
              "description": "If set to false, breakout rooms will be disabled.",
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            "breakoutRoomsPrivateChatEnabled": {
              "name": "breakoutRoomsPrivateChatEnabled",
              "in": "query",
              "description": "If set to false, the private chat will be disabled in breakout rooms.",
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            "breakoutRoomsRecord": {
              "name": "breakoutRoomsRecord",
              "in": "query",
              "description": "If set to false, breakout rooms will not be recorded.",
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            "moderatorOnlyMessage": {
              "name": "moderatorOnlyMessage",
              "in": "query",
              "description": "Display a message to all moderators in the public chat.\n\nThe value is interpreted in the same way as the `welcome` parameter. ",
              "schema": {
                "type": "string"
              }
            },
            "autoStartRecording": {
              "name": "autoStartRecording",
              "in": "query",
              "description": "Whether to automatically start recording when first user joins.\n\nWhen this parameter is `true`, the recording interface in the conference will be initially active. Moderators in the session can still pause and restart recording using the UI control.\n\n*NOTE: Don’t pass `autoStartRecording=false` and `allowStartStopRecording=false` - the moderator won’t be able to start recording! \n",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "allowStartStopRecording": {
              "name": "allowStartStopRecording",
              "in": "query",
              "description": "Allow the user to start/stop recording.\n\nIf you set both `allowStartStopRecording=false` and `autoStartRecording=true`, then the entire length of the session will be recorded, and the moderators in the session will not be able to pause/resume the recording. ",
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            "webcamsOnlyForModerator": {
              "name": "webcamsOnlyForModerator",
              "in": "query",
              "description": "Setting to `true` will cause all webcams shared by viewers during this meeting to only appear for moderators.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "bannerText": {
              "name": "bannerText",
              "in": "query",
              "description": "Will set the banner text in the client.",
              "schema": {
                "type": "string"
              }
            },
            "bannerColor": {
              "name": "bannerColor",
              "in": "query",
              "description": "Will set the banner background color in the client. The required format is color hex",
              "schema": {
                "type": "string",
                "format": "hex"
              }
            },
            "muteOnStart": {
              "name": "muteOnStart",
              "in": "query",
              "description": "Setting `true` will mute all users when the meeting starts.",
              "schema": {
                "type": "boolean"
              }
            },
            "allowModsToUnmuteUsers": {
              "name": "allowModsToUnmuteUsers",
              "in": "query",
              "description": "Setting to `true` will allow moderators to unmute other users in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "lockSettingsDisableCam": {
              "name": "lockSettingsDisableCam",
              "in": "query",
              "description": "Setting `true` will prevent users from sharing their camera in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "lockSettingsDisableMic": {
              "name": "lockSettingsDisableMic",
              "in": "query",
              "description": "Setting to `true` will only allow user to join listen only.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "lockSettingsDisablePrivateChat": {
              "name": "lockSettingsDisablePrivateChat",
              "in": "query",
              "description": "Setting to `true` will disable private chats in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "lockSettingsDisablePublicChat": {
              "name": "lockSettingsDisablePublicChat",
              "in": "query",
              "description": "Setting to `true` will disable public chat in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "lockSettingsDisableNote": {
              "name": "lockSettingsDisableNote",
              "in": "query",
              "description": "Setting to `true` will disable notes in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "lockSettingsLockedLayout": {
              "name": "lockSettingsLockedLayout",
              "in": "query",
              "description": "Setting to true will lock the layout in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "lockSettingsLockOnJoin": {
              "name": "lockSettingsLockOnJoin",
              "in": "query",
              "description": "Setting to `false` will not apply lock setting to users when they join.",
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            "lockSettingsLockOnJoinConfigurable": {
              "name": "lockSettingsLockOnJoinConfigurable",
              "in": "query",
              "description": "Setting to `true` will allow applying of `lockSettingsLockOnJoin`.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "guestPolicy": {
              "name": "guestPolicy",
              "in": "query",
              "description": "Will set the guest policy for the meeting. The guest policy determines whether or not users who send a join request with `guest=true` will be allowed to join the meeting.",
              "schema": {
                "type": "string",
                "enum": [
                  "ALWAYS_ACCEPT",
                  "ALWAYS_DENY",
                  "ASK_MODERATOR"
                ]
              }
            },
            "keepEvents": {
              "name": "keepEvents",
              "in": "query",
              "deprecated": true,
              "schema": {
                "type": "boolean"
              }
            },
            "meetingKeepEvents": {
              "name": "meetingKeepEvents",
              "in": "query",
              "description": "If `meetingKeepEvents` is `true`, meeting events will be stored even if the meeting is not recorded",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "endWhenNoModerator": {
              "name": "endWhenNoModerator",
              "in": "query",
              "description": "If `endWhenNoModerator` is `true` the meeting will end automatically after a delay in case no moderator is present.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "endWhenNoModeratorDelayInMinutes": {
              "name": "endWhenNoModeratorDelayInMinutes",
              "in": "query",
              "description": "If `endWhenNoModerator` is `true`, the meeting will be automatically ended after this many minutes.",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            "meetingLayout": {
              "name": "meetingLayout",
              "in": "query",
              "description": "Will set the default layout for the meeting.",
              "schema": {
                "type": "string",
                "enum": [
                  "CUSTOM_LAYOUT",
                  "SMART_LAYOUT",
                  "PRESENTATION_FOCUS",
                  "VIDEO_FOCUS"
                ],
                "default": "SMART_LAYOUT"
              }
            },
            "learningDashboardEnabled": {
              "name": "learningDashboardEnabled",
              "in": "query",
              "description": "When this option is set to `true`, the Learning Dashboard will be available, a place where moderators can view a summary of the activities of the meeting.",
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            "learningDashboardCleanupDelayInMinutes": {
              "name": "learningDashboardCleanupDelayInMinutes",
              "in": "query",
              "description": "This option set the delay (in minutes) before the Learning Dashboard become unavailable after the end of the meeting. If this value is zero, the Learning Dashboard will keep available permanently.",
              "schema": {
                "type": "integer",
                "default": 2
              }
            },
            "allowModsToEjectCameras": {
              "name": "allowModsToEjectCameras",
              "in": "query",
              "description": "Setting to `true` will allow moderators to close other users cameras in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "allowRequestsWithoutSession": {
              "name": "allowRequestsWithoutSession",
              "in": "query",
              "description": "Setting to `true` will allow users to join meetings without session cookie's validation.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "virtualBackgroundsDisabled": {
              "name": "virtualBackgroundsDisabled",
              "in": "query",
              "description": "Setting to `true` will disable Virtual Backgrounds for all users in the meeting.",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "password": {
              "name": "password",
              "in": "query",
              "description": "The meeting password, that defines the user role in the session (either `attendeePW` or `moderatorPW`).",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "fullName": {
              "name": "fullName",
              "in": "query",
              "description": "Name of the user",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "createTime": {
              "name": "createTime",
              "in": "query",
              "description": "Set this to the `createTime` returned by the `create` API call when the meeting was created. The server will ensure it matches the `createTime` for the session. If they differ, the `join` request will fail. This prevents a user from reusing their join URL for a subsequent session with the same `meetingID`.",
              "schema": {
                "type": "string"
              }
            },
            "userID": {
              "name": "userID",
              "in": "query",
              "description": "An identifier for this user that will help your application to identify which person this is. This user ID will be returned for this user in the `getMeetingInfo` API call so that you can check.",
              "schema": {
                "type": "string"
              }
            },
            "webVoiceConf": {
              "name": "webVoiceConf",
              "in": "query",
              "description": "If you want to pass in a custom voice-extension when a user joins the voice conference using voip. This is useful if you want to collect more info in you Call Detail Records about the user joining the conference.",
              "schema": {
                "type": "string"
              }
            },
            "configToken": {
              "name": "configToken",
              "in": "query",
              "description": "The token returned by a setConfigXML API call.",
              "deprecated": true,
              "schema": {
                "type": "string"
              }
            },
            "defaultLayout": {
              "name": "defaultLayout",
              "in": "query",
              "description": "The layout name to be loaded first when the application is loaded.",
              "schema": {
                "type": "string"
              }
            },
            "avatarURL": {
              "name": "avatarURL",
              "in": "query",
              "description": "The link for the user's avatar to be displayed.",
              "schema": {
                "type": "string"
              }
            },
            "redirect": {
              "name": "redirect",
              "in": "query",
              "description": "Variable that defines if user will be redirected. Setting this variable to `false` will not redirect the browser but returns an XML instead whether the JOIN call has succeeded or not.",
              "schema": {
                "type": "boolean",
                "default": true
              }
            },
            "clientURL": {
              "name": "clientURL",
              "in": "query",
              "description": "Some third party apps what to display their own custom client. These apps can pass the URL containing the custom client and when redirect is not set to false, the browser will get redirected to the value of clientURL.",
              "schema": {
                "type": "string"
              }
            },
            "joinViaHtml5": {
              "name": "joinViaHtml5",
              "in": "query",
              "description": "Set to `true` to force the HTML5 client to load for the user.",
              "deprecated": true,
              "schema": {
                "type": "boolean"
              }
            },
            "guest": {
              "name": "guest",
              "in": "query",
              "description": "Set to `true` to indicate that the user is a guest, otherwise do NOT send this parameter.",
              "schema": {
                "type": "boolean"
              }
            },
            "role": {
              "name": "role",
              "in": "query",
              "description": "Define user role for the meeting. If the role parameter is present and it's a valid option, it will take over of any password parameter provided.",
              "schema": {
                "type": "string",
                "enum": [
                  "MODERATOR",
                  "VIEWER"
                ]
              }
            },
            "excludeFromDashboard": {
              "name": "excludeFromDashboard",
              "in": "query",
              "description": "If the parameter is passed on JOIN with value `true`, the user will be omitted from being displayed in the Learning Dashboard.",
              "schema": {
                "type": "boolean"
              }
            },
            "meetingID-getRecordings": {
              "name": "meetingID",
              "in": "query",
              "description": "The `meetingID` for get the recordings. It can be a set of `meetingID`s separated by commas. If the meeting ID is not specified, it will return all the recordings. If a `recordID` is specified, the `meetingID` is ignored.",
              "schema": {
                "type": "string"
              }
            },
            "recordID": {
              "name": "recordID",
              "in": "query",
              "description": "A record ID for get the recordings. It can be a set of record IDs separate by commas. If the record ID is not specified, it will use `meetingID` as the main criteria. If neither is specified, it will return all the recordings. The record ID can also be used as a wildcard by including only the first characters in the string.",
              "schema": {
                "type": "string"
              }
            },
            "state": {
              "name": "state",
              "in": "query",
              "description": "The parameter state can be used to filter results. It can be a set of states separate by commas. If it is specified as `any`, recordings in all states are included.",
              "schema": {
                "type": "string",
                "enum": [
                  "processing",
                  "processed",
                  "published",
                  "unpublished",
                  "any"
                ],
                "default": "published,unpublished"
              }
            },
            "recordID-required": {
              "name": "recordID",
              "in": "query",
              "description": "ID of the recording.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "publish": {
              "name": "publish",
              "in": "query",
              "description": "Either true to publish the recording(s), or false to unpublish the recording(s).",
              "schema": {
                "type": "boolean"
              }
            },
            "updateRecordings-meta": {
              "name": "meta",
              "in": "query",
              "description": "You can pass one or more metadata values to be updated. The format of these parameters is the same as the metadata passed to the [create](#operation/create) call.\n\nWhen `meta_parameter=NOT EMPTY` and `meta_parameter` exists its value is updated, if it doesn’t exist, the parameter is added. When `meta_parameter=`, and `meta_parameter` exists the key is removed, when it doesn’t exist the action is ignored.",
              "schema": {
                "type": "string"
              }
            },
            "authUser": {
              "name": "authUser",
              "in": "query",
              "description": "The name of the user which is requesting access of the recording file.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "action": {
              "name": "action",
              "in": "query",
              "description": "The reason to access the recording.",
              "schema": {
                "type": "string"
              }
            },
            "callbackURL": {
              "name": "callbackURL",
              "in": "query",
              "description": "The URL which receive the events.",
              "schema": {
                "type": "string"
              }
            },
            "enabled": {
              "name": "enabled",
              "in": "query",
              "description": "If true, hook will receive events, else, it won't",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            "hookID": {
              "name": "hookID",
              "in": "query",
              "description": "The identifier for the target hook.",
              "schema": {
                "type": "string"
              }
            },
            "configXML": {
              "name": "configXML",
              "in": "query",
              "description": "A valid `config.xml` file URL encoded.\n\n### Example\nOriginal XML\n```xml\n<config>\n    <modules>\n        <localeversion supressWarning=\"false\">0.9.0</localeversion>\n    </modules>\n</config>\n```\n\nURL Encoded\n```url\n%3Cconfig%3E%3Clocaleversion+suppressWarning%3D%22false%22%3E0.9.0%3C%2Flocaleversion%3E%3C%2Fmodules%3E%3C%2Fconfig%3E\n```\n\n",
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "plugin-redoc-1": {
      "url": "redocusaurus/plugin-redoc-1.yaml",
      "themeId": "theme-redoc",
      "isSpecFile": true,
      "spec": {
        "openapi": "3.0.0",
        "info": {
          "title": "Elos Data API",
          "description": "###  Coming soon 🚨\nElos meeting data, reports and artifacts\n",
          "version": "2.1.0",
          "servers": [
            {
              "url": "https://api.h.elos.dev/"
            }
          ]
        },
        "tags": [
          {
            "name": "summary"
          },
          {
            "name": "artifacts"
          }
        ],
        "paths": {
          "/institutions/{institution_guid}/reports/summary/{ref_date}": {
            "get": {
              "tags": [
                "summary"
              ],
              "summary": "summary",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "ref_date",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "description": "Reference date in YYYY-MM-DD or YYYY-MM format"
                },
                {
                  "in": "query",
                  "name": "filter",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "monthly"
                    ]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "unique_users": {
                            "type": "integer"
                          },
                          "meetings": {
                            "type": "integer"
                          },
                          "duration_meetings_s": {
                            "type": "integer"
                          },
                          "recordings": {
                            "type": "integer"
                          },
                          "duration_recordings_s": {
                            "type": "integer"
                          },
                          "recordings_size_bytes": {
                            "type": "integer"
                          },
                          "total_accesses": {
                            "type": "integer"
                          },
                          "total_rooms": {
                            "type": "integer"
                          },
                          "max_simultaneous_users": {
                            "type": "integer"
                          },
                          "max_simultaneous_users_at": {
                            "type": "string"
                          },
                          "max_simultaneous_meetings": {
                            "type": "integer"
                          },
                          "max_simultaneous_meetings_at": {
                            "type": "string"
                          },
                          "max_simultaneous_meetings_with_breakouts": {
                            "type": "integer"
                          },
                          "max_simultaneous_meetings_with_breakouts_at": {
                            "type": "string"
                          },
                          "longest_meeting_duration_s": {
                            "type": "integer"
                          },
                          "biggest_meeting_users": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/institutions/{institution_guid}/artifacts/report/{ref_month}": {
            "get": {
              "tags": [
                "artifacts"
              ],
              "summary": "report",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "ref_month",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "description": "Reference month in YYYY-MM format"
                },
                {
                  "in": "query",
                  "name": "language",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "enum": [
                      "pt",
                      "en"
                    ]
                  }
                },
                {
                  "in": "query",
                  "name": "format",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "enum": [
                      "pdf",
                      "csv",
                      "xls"
                    ]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "link": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "File not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/institutions/{institution_guid}/artifacts/meetings/{int_meeting_id}/engagement_report": {
            "get": {
              "tags": [
                "artifacts"
              ],
              "summary": "engagement_report",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "int_meeting_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "link": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Meeting not found or file not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/institutions/{institution_guid}/artifacts/meetings/{int_meeting_id}/participants_list": {
            "get": {
              "tags": [
                "artifacts"
              ],
              "summary": "participants_list",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "int_meeting_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "link": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Meeting not found or file not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/institutions/{institution_guid}/artifacts/meetings/{int_meeting_id}/shared_notes": {
            "get": {
              "tags": [
                "artifacts"
              ],
              "summary": "shared_notes",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "int_meeting_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "link": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Meeting not found or file not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/institutions/{institution_guid}/artifacts/meetings/{int_meeting_id}/file": {
            "get": {
              "tags": [
                "artifacts"
              ],
              "summary": "file",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "int_meeting_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "file",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "query",
                  "name": "file_name",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "link": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Meeting not found or file not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "put": {
              "tags": [
                "artifacts"
              ],
              "summary": "file",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "int_meeting_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "file",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "query",
                  "name": "file_name",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response"
                },
                "400": {
                  "description": "Bad Request",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Meeting not found or file not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/institutions/{institution_guid}/artifacts/meetings/{int_meeting_id}/list_objects": {
            "get": {
              "tags": [
                "artifacts"
              ],
              "summary": "list_objects",
              "parameters": [
                {
                  "in": "path",
                  "name": "institution_guid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "int_meeting_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "query",
                  "name": "filter",
                  "description": "Comma-separated list of artifact types. If specified, only included artifacts are returned.",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "enum": [
                      "shared_notes",
                      "participants_list",
                      "engagement_report"
                    ]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "objects": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "file_type": {
                                  "type": "string"
                                },
                                "file_name": {
                                  "type": "string"
                                },
                                "link": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "file_name",
                                "link"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Meeting not found or file not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "components": {}
      }
    },
    "plugin-redoc-2": {
      "url": "redocusaurus/plugin-redoc-2.yaml",
      "themeId": "theme-redoc",
      "isSpecFile": true,
      "spec": {
        "openapi": "3.0.0",
        "info": {
          "title": "Elos Administrative API",
          "description": "###  Coming soon 🚨\nAdministrative API for managing Elos institutions and users\n",
          "version": "0.5.0",
          "servers": [
            {
              "url": "https://api.h.elos.dev/"
            }
          ]
        },
        "paths": {
          "/institution/{guid}": {
            "get": {
              "summary": "institution",
              "parameters": [
                {
                  "name": "guid",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Institution details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Institution"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Institution not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            },
            "put": {
              "summary": "institution",
              "parameters": [
                {
                  "name": "guid",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpdateInstitution"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Institution updated"
                },
                "400": {
                  "description": "Invalid request body"
                },
                "404": {
                  "description": "Institution not found"
                },
                "409": {
                  "description": "Name already exists"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/institution/": {
            "post": {
              "summary": "institution",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreateInstitution"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Institution created",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Institution"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid request body"
                },
                "409": {
                  "description": "Institution name already exists"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/institution/{guid}/meeting_settings": {
            "get": {
              "summary": "institution/meeting_settings",
              "parameters": [
                {
                  "name": "guid",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Meeting settings",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/MeetingSettings"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Institution not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/institution/{guid}/unsubscription": {
            "post": {
              "summary": "institution/unsubscription",
              "parameters": [
                {
                  "name": "guid",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Institution unsubscribed",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UnsubscribeResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Institution not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/institution/{guid}/reactivation": {
            "post": {
              "summary": "institution/reactivation",
              "parameters": [
                {
                  "name": "guid",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Institution reactivated",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ReactivateResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Institution not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/user/{external_user_id}": {
            "delete": {
              "summary": "user",
              "parameters": [
                {
                  "name": "external_user_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "User data removed",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/RemoveUserResponse"
                      }
                    }
                  }
                },
                "404": {
                  "description": "User not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          }
        },
        "components": {
          "schemas": {
            "Institution": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "shared_secrets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SharedSecret"
                  }
                }
              }
            },
            "SharedSecret": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "secret": {
                  "type": "string"
                }
              }
            },
            "CreateInstitution": {
              "type": "object",
              "required": [
                "name",
                "secret_name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "secret_name": {
                  "type": "string"
                }
              }
            },
            "UpdateInstitution": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "participants_limit": {
                  "type": "integer",
                  "minimum": 0
                },
                "retention_days": {
                  "type": "integer",
                  "minimum": 1
                },
                "meeting_limit": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            },
            "MeetingSettings": {
              "type": "object",
              "properties": {
                "institution_guid": {
                  "type": "string",
                  "format": "uuid"
                },
                "settings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingSetting"
                  }
                }
              }
            },
            "MeetingSetting": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "UnsubscribeResponse": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string",
                  "format": "uuid"
                },
                "unsubscription_timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "total_expired_secrets": {
                  "type": "integer"
                },
                "expired_secrets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SharedSecret"
                  }
                }
              }
            },
            "ReactivateResponse": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string",
                  "format": "uuid"
                },
                "total_enabled_secrets": {
                  "type": "integer"
                },
                "enabled_secrets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SharedSecret"
                  }
                }
              }
            },
            "RemoveUserResponse": {
              "type": "object",
              "properties": {
                "external_user_id": {
                  "type": "string"
                },
                "total_anonymized_records": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    }
  },
  "docusaurus-theme-redoc": {
    "theme-redoc": {
      "lightTheme": {
        "typography": {
          "fontFamily": "var(--ifm-font-family-base)",
          "fontSize": "var(--ifm-font-size-base)",
          "lineHeight": "var(--ifm-line-height-base)",
          "fontWeightLight": "var(--ifm-font-weight-light)",
          "fontWeightRegular": "var(--ifm-font-weight-base)",
          "fontWeightBold": "var(--ifm-font-weight-bold)",
          "headings": {
            "fontFamily": "var(--ifm-heading-font-family)",
            "fontWeight": "var(--ifm-heading-font-weight)",
            "lineHeight": "var(--ifm-heading-line-height)"
          },
          "code": {
            "fontFamily": "var(--ifm-font-family-monospace)",
            "lineHeight": "var(--ifm-pre-line-height)"
          }
        },
        "sidebar": {
          "width": "300px",
          "backgroundColor": "#ffffff"
        },
        "rightPanel": {
          "backgroundColor": "#303846"
        },
        "colors": {
          "primary": {
            "main": "#1890ff"
          }
        },
        "theme": {
          "prism": {
            "additionalLanguages": [
              "scala"
            ]
          }
        }
      },
      "darkTheme": {
        "typography": {
          "fontFamily": "var(--ifm-font-family-base)",
          "fontSize": "var(--ifm-font-size-base)",
          "lineHeight": "var(--ifm-line-height-base)",
          "fontWeightLight": "var(--ifm-font-weight-light)",
          "fontWeightRegular": "var(--ifm-font-weight-base)",
          "fontWeightBold": "var(--ifm-font-weight-bold)",
          "headings": {
            "fontFamily": "var(--ifm-heading-font-family)",
            "fontWeight": "var(--ifm-heading-font-weight)",
            "lineHeight": "var(--ifm-heading-line-height)"
          },
          "code": {
            "fontFamily": "var(--ifm-font-family-monospace)",
            "lineHeight": "var(--ifm-pre-line-height)"
          }
        },
        "sidebar": {
          "width": "300px",
          "backgroundColor": "rgb(24, 25, 26)",
          "textColor": "#f5f6f7",
          "arrow": {
            "color": "#f5f6f7"
          }
        },
        "colors": {
          "text": {
            "primary": "#f5f6f7",
            "secondary": "rgba(255, 255, 255, 1)"
          },
          "gray": {
            "50": "#FAFAFA",
            "100": "#F5F5F5"
          },
          "border": {
            "dark": "#ffffff",
            "light": "rgba(0,0,0, 0.1)"
          },
          "primary": {
            "main": "#1890ff"
          }
        },
        "schema": {
          "nestedBackground": "rgb(24, 25, 26)",
          "typeNameColor": "rgba(255, 255, 255, 1)",
          "typeTitleColor": "rgba(255, 255, 255, 1)"
        },
        "theme": {
          "prism": {
            "additionalLanguages": [
              "scala"
            ]
          }
        }
      },
      "options": {
        "scrollYOffset": "nav.navbar",
        "expandSingleSchemaField": true,
        "menuToggle": true,
        "suppressWarnings": true
      }
    }
  }
}